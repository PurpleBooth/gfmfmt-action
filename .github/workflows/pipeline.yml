name: Pipeline
on:
  push:
    branches:
    - '*'
  pull_request:
jobs:
  lint:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: luizm/action-sh-checker@v0.3.0
      env:
        SHFMT_OPTS: -s
      with:
        sh_checker_comment: true

  lint-markdown:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: mig4/setup-bats@v1
    - run: sudo apt-get install pandoc
    - run: make test

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: docker/build-push-action@v2
      with:
        push: false

  versio-plan:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
    - run: versio check
    - run: versio plan
    - run: versio release --dry-run

  release:
    if: github.ref == 'refs/heads/main'
    needs:
    - lint
    - test
    - docker-build
    - versio-plan
    - lint-markdown
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    - uses: chaaz/versio-actions/install@v1.2
      name: Install versio
    - id: previous_version
      run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
    - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
      id: get_versio_plan
    - name: Generate release
      if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
      run: versio release
    - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
      id: current_version
    - run: echo ::set-output "name=version_bump::true"
      if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
      id: version_bump

  upload-release:
    if: needs.release.outputs.version_bump
    needs:
    - release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      name: Checkout the repository
      with:
        lfs: true
        fetch-depth: 0
        ref: v${{ needs.release.outputs.current_version }}
    - id: get_repository_name
      name: Calculate repository name
      run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
        -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash
    - uses: PurpleBooth/changelog-action@v0.3.3
      id: changelog
      with:
        args: v${{ needs.release.outputs.previous_version }}..v${{ needs.release.outputs.current_version }}
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      uses: ncipollo/release-action@v1.12.0
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: ${{ steps.changelog.outputs.changelog }}
        name: Release v${{ needs.release.outputs.current_version }}
        tag: v${{ needs.release.outputs.current_version }}
